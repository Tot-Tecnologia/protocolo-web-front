/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as SolicitarDocumentoImport } from './../routes/solicitarDocumento'
import { Route as RecuperarSenhaImport } from './../routes/recuperarSenha'
import { Route as LoginImport } from './../routes/login'
import { Route as ConsultarDocumentosImport } from './../routes/consultarDocumentos'
import { Route as CadastroImport } from './../routes/cadastro'
import { Route as IndexImport } from './../routes/index'

// Create/Update Routes

const SolicitarDocumentoRoute = SolicitarDocumentoImport.update({
  id: '/solicitarDocumento',
  path: '/solicitarDocumento',
  getParentRoute: () => rootRoute,
} as any)

const RecuperarSenhaRoute = RecuperarSenhaImport.update({
  id: '/recuperarSenha',
  path: '/recuperarSenha',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ConsultarDocumentosRoute = ConsultarDocumentosImport.update({
  id: '/consultarDocumentos',
  path: '/consultarDocumentos',
  getParentRoute: () => rootRoute,
} as any)

const CadastroRoute = CadastroImport.update({
  id: '/cadastro',
  path: '/cadastro',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cadastro': {
      id: '/cadastro'
      path: '/cadastro'
      fullPath: '/cadastro'
      preLoaderRoute: typeof CadastroImport
      parentRoute: typeof rootRoute
    }
    '/consultarDocumentos': {
      id: '/consultarDocumentos'
      path: '/consultarDocumentos'
      fullPath: '/consultarDocumentos'
      preLoaderRoute: typeof ConsultarDocumentosImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recuperarSenha': {
      id: '/recuperarSenha'
      path: '/recuperarSenha'
      fullPath: '/recuperarSenha'
      preLoaderRoute: typeof RecuperarSenhaImport
      parentRoute: typeof rootRoute
    }
    '/solicitarDocumento': {
      id: '/solicitarDocumento'
      path: '/solicitarDocumento'
      fullPath: '/solicitarDocumento'
      preLoaderRoute: typeof SolicitarDocumentoImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/consultarDocumentos': typeof ConsultarDocumentosRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarDocumento': typeof SolicitarDocumentoRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/consultarDocumentos': typeof ConsultarDocumentosRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarDocumento': typeof SolicitarDocumentoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/consultarDocumentos': typeof ConsultarDocumentosRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarDocumento': typeof SolicitarDocumentoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cadastro'
    | '/consultarDocumentos'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarDocumento'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cadastro'
    | '/consultarDocumentos'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarDocumento'
  id:
    | '__root__'
    | '/'
    | '/cadastro'
    | '/consultarDocumentos'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarDocumento'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CadastroRoute: typeof CadastroRoute
  ConsultarDocumentosRoute: typeof ConsultarDocumentosRoute
  LoginRoute: typeof LoginRoute
  RecuperarSenhaRoute: typeof RecuperarSenhaRoute
  SolicitarDocumentoRoute: typeof SolicitarDocumentoRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CadastroRoute: CadastroRoute,
  ConsultarDocumentosRoute: ConsultarDocumentosRoute,
  LoginRoute: LoginRoute,
  RecuperarSenhaRoute: RecuperarSenhaRoute,
  SolicitarDocumentoRoute: SolicitarDocumentoRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cadastro",
        "/consultarDocumentos",
        "/login",
        "/recuperarSenha",
        "/solicitarDocumento"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cadastro": {
      "filePath": "cadastro.tsx"
    },
    "/consultarDocumentos": {
      "filePath": "consultarDocumentos.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recuperarSenha": {
      "filePath": "recuperarSenha.tsx"
    },
    "/solicitarDocumento": {
      "filePath": "solicitarDocumento.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
