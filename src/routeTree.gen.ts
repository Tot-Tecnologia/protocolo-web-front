/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SolicitarProcessoImport } from './routes/solicitarProcesso'
import { Route as RecuperarSenhaImport } from './routes/recuperarSenha'
import { Route as LoginImport } from './routes/login'
import { Route as CadastroImport } from './routes/cadastro'
import { Route as IndexImport } from './routes/index'
import { Route as ConsultarProcessosIndexImport } from './routes/consultarProcessos/index'
import { Route as ConsultarProcessosResultadoImport } from './routes/consultarProcessos/resultado'
import { Route as ConsultarProcessosFiltroImport } from './routes/consultarProcessos/filtro'

// Create/Update Routes

const SolicitarProcessoRoute = SolicitarProcessoImport.update({
  id: '/solicitarProcesso',
  path: '/solicitarProcesso',
  getParentRoute: () => rootRoute,
} as any)

const RecuperarSenhaRoute = RecuperarSenhaImport.update({
  id: '/recuperarSenha',
  path: '/recuperarSenha',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CadastroRoute = CadastroImport.update({
  id: '/cadastro',
  path: '/cadastro',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ConsultarProcessosIndexRoute = ConsultarProcessosIndexImport.update({
  id: '/consultarProcessos/',
  path: '/consultarProcessos/',
  getParentRoute: () => rootRoute,
} as any)

const ConsultarProcessosResultadoRoute =
  ConsultarProcessosResultadoImport.update({
    id: '/consultarProcessos/resultado',
    path: '/consultarProcessos/resultado',
    getParentRoute: () => rootRoute,
  } as any)

const ConsultarProcessosFiltroRoute = ConsultarProcessosFiltroImport.update({
  id: '/consultarProcessos/filtro',
  path: '/consultarProcessos/filtro',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cadastro': {
      id: '/cadastro'
      path: '/cadastro'
      fullPath: '/cadastro'
      preLoaderRoute: typeof CadastroImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recuperarSenha': {
      id: '/recuperarSenha'
      path: '/recuperarSenha'
      fullPath: '/recuperarSenha'
      preLoaderRoute: typeof RecuperarSenhaImport
      parentRoute: typeof rootRoute
    }
    '/solicitarProcesso': {
      id: '/solicitarProcesso'
      path: '/solicitarProcesso'
      fullPath: '/solicitarProcesso'
      preLoaderRoute: typeof SolicitarProcessoImport
      parentRoute: typeof rootRoute
    }
    '/consultarProcessos/filtro': {
      id: '/consultarProcessos/filtro'
      path: '/consultarProcessos/filtro'
      fullPath: '/consultarProcessos/filtro'
      preLoaderRoute: typeof ConsultarProcessosFiltroImport
      parentRoute: typeof rootRoute
    }
    '/consultarProcessos/resultado': {
      id: '/consultarProcessos/resultado'
      path: '/consultarProcessos/resultado'
      fullPath: '/consultarProcessos/resultado'
      preLoaderRoute: typeof ConsultarProcessosResultadoImport
      parentRoute: typeof rootRoute
    }
    '/consultarProcessos/': {
      id: '/consultarProcessos/'
      path: '/consultarProcessos'
      fullPath: '/consultarProcessos'
      preLoaderRoute: typeof ConsultarProcessosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarProcesso': typeof SolicitarProcessoRoute
  '/consultarProcessos/filtro': typeof ConsultarProcessosFiltroRoute
  '/consultarProcessos/resultado': typeof ConsultarProcessosResultadoRoute
  '/consultarProcessos': typeof ConsultarProcessosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarProcesso': typeof SolicitarProcessoRoute
  '/consultarProcessos/filtro': typeof ConsultarProcessosFiltroRoute
  '/consultarProcessos/resultado': typeof ConsultarProcessosResultadoRoute
  '/consultarProcessos': typeof ConsultarProcessosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cadastro': typeof CadastroRoute
  '/login': typeof LoginRoute
  '/recuperarSenha': typeof RecuperarSenhaRoute
  '/solicitarProcesso': typeof SolicitarProcessoRoute
  '/consultarProcessos/filtro': typeof ConsultarProcessosFiltroRoute
  '/consultarProcessos/resultado': typeof ConsultarProcessosResultadoRoute
  '/consultarProcessos/': typeof ConsultarProcessosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cadastro'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarProcesso'
    | '/consultarProcessos/filtro'
    | '/consultarProcessos/resultado'
    | '/consultarProcessos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cadastro'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarProcesso'
    | '/consultarProcessos/filtro'
    | '/consultarProcessos/resultado'
    | '/consultarProcessos'
  id:
    | '__root__'
    | '/'
    | '/cadastro'
    | '/login'
    | '/recuperarSenha'
    | '/solicitarProcesso'
    | '/consultarProcessos/filtro'
    | '/consultarProcessos/resultado'
    | '/consultarProcessos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CadastroRoute: typeof CadastroRoute
  LoginRoute: typeof LoginRoute
  RecuperarSenhaRoute: typeof RecuperarSenhaRoute
  SolicitarProcessoRoute: typeof SolicitarProcessoRoute
  ConsultarProcessosFiltroRoute: typeof ConsultarProcessosFiltroRoute
  ConsultarProcessosResultadoRoute: typeof ConsultarProcessosResultadoRoute
  ConsultarProcessosIndexRoute: typeof ConsultarProcessosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CadastroRoute: CadastroRoute,
  LoginRoute: LoginRoute,
  RecuperarSenhaRoute: RecuperarSenhaRoute,
  SolicitarProcessoRoute: SolicitarProcessoRoute,
  ConsultarProcessosFiltroRoute: ConsultarProcessosFiltroRoute,
  ConsultarProcessosResultadoRoute: ConsultarProcessosResultadoRoute,
  ConsultarProcessosIndexRoute: ConsultarProcessosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cadastro",
        "/login",
        "/recuperarSenha",
        "/solicitarProcesso",
        "/consultarProcessos/filtro",
        "/consultarProcessos/resultado",
        "/consultarProcessos/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cadastro": {
      "filePath": "cadastro.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recuperarSenha": {
      "filePath": "recuperarSenha.tsx"
    },
    "/solicitarProcesso": {
      "filePath": "solicitarProcesso.tsx"
    },
    "/consultarProcessos/filtro": {
      "filePath": "consultarProcessos/filtro.tsx"
    },
    "/consultarProcessos/resultado": {
      "filePath": "consultarProcessos/resultado.tsx"
    },
    "/consultarProcessos/": {
      "filePath": "consultarProcessos/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
